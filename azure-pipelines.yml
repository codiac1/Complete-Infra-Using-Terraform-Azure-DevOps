trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

name: $(date:yyyyMMdd)$(rev:.r)

variables:
  terraformVersion: 'latest'
  backendServiceArm: '<your-azure-service-connection>'
  backendResourceGroup: '<your-azure-resource-group>'
  backendStorageAccount: '<your-azure-storage-account>'
  backendContainer: '<your-azure-container-name>'
  backendKey: '<your-tfstate-key>'
  provider: 'azurerm'

stages:
- stage: Terraform_AKS_Provisioning
  displayName: 'AKS Provisioning'
  jobs:
  - job: AKS_Provisioning
    displayName: 'AKS Provisioning'
    steps:
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: $(terraformVersion)

      - task: TerraformTaskV4@4
        displayName: Terraform init
        inputs:
          provider: $(provider)
          command: 'init'
          backendServiceArm: $(backendServiceArm)
          backendAzureRmResourceGroupName: $(backendResourceGroup)
          backendAzureRmStorageAccountName: $(backendStorageAccount)
          backendAzureRmContainerName: $(backendContainer)
          backendAzureRmKey: $(backendKey)
          
      - task: TerraformTaskV4@4
        displayName: Terraform Plan
        inputs:
          provider: $(provider)
          command: 'plan'
          environmentServiceNameAzureRM: $(backendServiceArm)

      - task: TerraformTaskV4@4
        displayName: Terraform Apply
        inputs:
          provider: $(provider)
          command: 'apply'
          commandOptions: '-auto-approve'
          environmentServiceNameAzureRM: $(backendServiceArm)

      - task: TerraformTaskV4@4
        displayName: Terraform Output
        inputs:
          provider: $(provider)
          command: 'output'
          environmentServiceNameAzureRM: $(backendServiceArm)
